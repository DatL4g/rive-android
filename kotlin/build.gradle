apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "org.jetbrains.dokka"

android {
    compileSdk 34
    ndkVersion "25.1.8937393"
    namespace "app.rive.runtime.kotlin"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
                arguments "-DCMAKE_VERBOSE_MAKEFILE=1", "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=ON",
                        "-DANDROID_CPP_FEATURES=no-exceptions no-rtti", "-DANDROID_STL=c++_shared"
            }
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    externalNativeBuild {
        cmake {
            path file("src/main/cpp/CMakeLists.txt")
            version "3.22.1"
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    dokkaGfm {
        dokkaSourceSets {
            named("main") {
                noAndroidSdkLink.set(false)
                outputDirectory.set(layout.buildDirectory.resolve("dokka"))
                reportUndocumented.set(true)
            }
        }
    }
}

configurations.configureEach {
    resolutionStrategy.force "junit:junit:4.13.2"
}

dependencies {
    implementation "com.android.volley:volley:1.2.1"
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.13.1"
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "com.getkeepsafe.relinker:relinker:1.4.5"
    implementation "androidx.startup:startup-runtime:1.2.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "androidx.test:core-ktx:1.6.1"

    androidTestImplementation "androidx.test.ext:junit:1.2.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"
}

// Commenting this out, this only really helps when you're doing local dev, but it means our git actions need abd!
// static def getDeviceAbi() {
//     return "adb shell getprop ro.product.cpu.abi".execute().text.trim()
// }

// task buildJNI(type: Exec) {
//     workingDir "../cpp"
//     commandLine "./build.rive.for.sh", "-a", getDeviceAbi()
// }

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"
